server:
  port: 8081

spring:
  application:
    name: order-service
  datasource:
    url: jdbc:h2:mem:testdb;MODE=MySQL  # H2 데이터베이스 메모리 모드, MySQL 호환 모드
    driver-class-name: org.h2.Driver   # H2 JDBC 드라이버 클래스
    username: order                    # 기본 사용자명
    password: order                    # 기본 비밀번호 (없음)
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect  # H2 Dialect 사용
    hibernate:
      ddl-auto: update                 # 스키마 자동 생성 (옵션: none, validate, update, create, create-drop)
  h2:
    console:
      enabled: true                    # H2 콘솔 활성화
      path: /h2-console                # H2 콘솔 경로
  rabbitmq:
    host: rabbitmq.commerce.svc.cluster.local # raiibtMQ Host
    port: 5672
    username: guest
    password: guest

  kafka:
    bootstrap-servers: kafka.commerce.svc.cluster.local:9092  # 실제 Kafka 브로커 주소
    #    bootstrap-servers: localhost:9092  # 실제 Kafka 브로커 주소
    consumer:
      group-id: coupon-consumer-group   # 소비자 그룹 ID
      auto-offset-reset: earliest       # 초기 오프셋 설정 (가장 처음부터 읽기)
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    # 필요한 경우 추가 소비자 설정 추가 가능

  data:
    redis:
      host: redis.commerce.svc.cluster.local
      port: 6379
      password: redis!


# kafka 쿠폰 토픽
coupon:
  topic: coupon-topic  # 쿠폰 메시지를 소비할 Kafka 토픽 이름

# rabbitMQ 주문완료 처리
order:
  exchange: order.exchange
  routingKey: order.completed

worker:
  queue: order.completed.queue

eureka:
  client:
    service-url:
      defaultZone: http://eureka-server.commerce.svc.cluster.local:8761/eureka/
    fetch-registry: true
    register-with-eureka: true

  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}

management:
  endpoints:
    web:
      exposure:
        include: health, info